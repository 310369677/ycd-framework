
#location 顺序参考 https://blog.csdn.net/agonie201218/article/details/92795522

#user  nobody;
#nginx要开启的进程数为8
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#指定进程id的存储位置
#pid        logs/nginx.pid;


events {
 #nginx工作模式，epoll是linux平台下的高效模式
#use epoll;
#定义nginx每个进程的最大连接数为51200，一般网上都配置65535，根据张宴大神的建议51200即可
worker_connections 51200;
}


http {
    #实现对配置文件所包含的文件的设定
    include       mime.types;
    #设置默认类型为二进制流
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

 server_names_hash_bucket_size 128;

#指定来自客户端请求头的headerbuffer大小，设置为32KB
client_header_buffer_size 32k;
#指定客户端请求中较大的消息头的缓存最大数量和大小，这里是4个32KB
large_client_header_buffers 4 32k;
#上传文件大小
client_max_body_size 356m;

#nginx的HttpLog模块指定，指定nginx日志的输出格式，输出格式为access
#log_format access '$remote_addr - $remote_user [$time_local] "$request" '
#'$status $body_bytes_sent "$http_referer" '
#'"$http_user_agent" "$http_x_forwarded_for"';

#access日志存在未知
#access_log /var/log/nginx/access.log access;

#开启高效模式文件传输模式，将tcp_nopush和tcp_nodely两个指另设置为on，用于防止网络阻塞。
sendfile on;
tcp_nopush on;
#tcp_nodely on;

#设置客户端连接保持活动的超时时间
keepalive_timeout 65;
server_tokens off;

#客户端请求主体读取缓存
client_body_buffer_size 512k;
proxy_connect_timeout 5;
proxy_send_timeout 60;
proxy_read_timeout 5;
proxy_buffer_size 16k;
proxy_buffers 4 64k;
proxy_busy_buffers_size 128k;
proxy_temp_file_write_size 128k;

#fastcgi_connect_timeout 300;
#fastcgi_send_timeout 300;
#fastcgi_read_timeout 300;
#fastcgi_buffer_timeout 300;
#fastcgi_buffers 4 64k;
#fastcgi_busy_buffers_size 128k;
#fastcgi_temp_file_write_size 128k;

#开启gzip
gzip on;

#允许压缩的最小字节数
gzip_min_length 1k;

#4个单位为16k的内存作为压缩结果流缓存
gzip_buffers 4 16k;

#设置识别HTTP协议版本，默认是1.1
gzip_http_version 1.1;

#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPU
gzip_comp_level 2;

#压缩的类型
gzip_types text/plain application/x-javascript text/css application/xml;

#让前端的缓存服务器混村经过的gzip压缩的页面
gzip_vary on;

#负载均衡
upstream  stock.com{
#每个请求按照ip的hash结果分配，同一个ip的访客固定访问一个后端服务器，可解决动态网页session共享问题。
ip_hash;
server 127.0.0.1:8080;
#server 127.0.0.1:8082;
}
#禁止通过ip访问
server {
server_name _;
return 404;
}

server {
listen 8081;
server_name localhost;# 对应你的域名
charset utf-8; #设置编码为utf-8
#index index.html index.htm index.jsp index.do index.action;
#指定虚拟主机根目录为/var/www/
#root /var/www/;
#if ( -d $request_filename)
#{
#rewrite ^/(.*)([^/])$ http://$host/$1$2/permanent;
#}
#方法1：将jsp等动态文件交给的localhost.com处理，此方法用的不多
#location ~ \.(jsp|jspx|do|action)(\/.*)?$ {
#index index.jsp;
#proxy_set_header Host $host; 
#proxy_set_header X-Real-IP $remote_addr;
#proxy_pass http://localhost.com;
#} 

    #无符号修饰的处理html相关的内容
    location  ~ /*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ {
            root   html;
            index  index.html;
        }

    #无符号修饰处理css或则js
     location  ~ /*.(js|css)?$ {
            root   html;
        }


#方法2：将所有请求交给localhost.com处理，静态文件通过额外定义location交给nginx处理。
location ~ /  {
#当502或504时，将请求转发到负载均衡中正常server中
proxy_next_upstream http_502 http_504 error timeout invalid_header;
proxy_pass http://192.168.1.133:8090;
proxy_redirect off;
proxy_set_header Host $host;
#若nginx为最前端时，后端获得X-Real-IP传递的ip即为实际ip，若nginx不是最前端时，实际ip为X-Forwarded-For值。
proxy_set_header X-Forwarded-For $remote_addr;
}




#静态文件交给nginx处理
#location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
#{
#root E:/gitlab-pro/stock-html;
#expires 30d;
#}
#静态文件交给nginx处理
#location ~ .*\.(js|css)?$ 
#{
#root E:/gitlab-pro/stock-html; 
#expires 1h; 
#}
location /media {
#指定后端服务器地址和端口
proxy_pass http://stock.com;
#proxy_next_upstream 故障转移待空
proxy_redirect off; 
#后端服务器获取用户的主机名或真实IP地址
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

#客户端请求主体缓冲区最大值
client_max_body_size 10m;
#客户端请求主体缓存区大小
client_body_buffer_size 128k; 
#与后端服务器连接的超时时间
proxy_connect_timeout 90;
#后端服务器的数据回传时间90s，90s内未传回，nginx将断开连接
proxy_send_timeout 90; 
#nginx从代理的后端服务器获取信息的时间90s
proxy_read_timeout 90; 

#缓冲区大小默认等于proxy_buffers设置的大小
proxy_buffer_size 4k;
#设置缓冲区的数量和大小
proxy_buffers 4 32k;
#设置系统很忙时可以使用的proxy_buffers的大小，官方推荐位proxy_buffersX2
proxy_busy_buffers_size 64k; 
#指定proxy缓存临时文件的大小
proxy_temp_file_write_size 64k;
}
location /files/ {
#静止外部访问
internal;
#
alias /home/nfs/media/; 
}
}
# HTTPS server配置
#server {
#listen 443;
#server_name www.test.com; # 对应你的域名
#root /var/www/webapps;

#ssl on;
#ssl_certificate /usr/local/nginx/conf/test.crt;
#ssl_certificate_key /usr/local/nginx/conf/test_nopass.key;

#ssl_session_timeout 5m;

#ssl_protocols SSLv2 SSLv3 TLSv1;
#ssl_ciphers HIGH:!aNULL:!MD5;
#ssl_prefer_server_ciphers on;

#location / {
#root html;
#index index.html index.htm;
}
